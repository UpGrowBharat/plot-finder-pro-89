
import { useState } from 'react';
import Header from '@/components/Header';
import Footer from '@/components/Footer';
import AuthModal from '@/components/AuthModal';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Upload, MapPin, Home, DollarSign, X, LogIn } from 'lucide-react';
import { useToast } from '@/components/ui/use-toast';
import { useAuth } from '@/hooks/useAuth';
import { supabase } from '@/integrations/supabase/client';

const ListProperty = () => {
  const { toast } = useToast();
  const { user } = useAuth();
  const [authModalOpen, setAuthModalOpen] = useState(false);
  const [uploadedFiles, setUploadedFiles] = useState<File[]>([]);
  const [loading, setLoading] = useState(false);
  const [formData, setFormData] = useState({
    title: '',
    type: '',
    size: '',
    unit: '',
    state: '',
    city: '',
    area: '',
    pincode: '',
    address: '',
    price: '',
    negotiable: '',
    description: '',
    features: [] as string[]
  });

  const handleInputChange = (field: string, value: string) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    if (event.target.files) {
      const files = Array.from(event.target.files);
      setUploadedFiles(prev => [...prev, ...files]);
    }
  };

  const removeFile = (index: number) => {
    setUploadedFiles(prev => prev.filter((_, i) => i !== index));
  };

  const uploadImages = async (propertyId: string): Promise<string[]> => {
    const imageUrls: string[] = [];
    
    for (let i = 0; i < uploadedFiles.length; i++) {
      const file = uploadedFiles[i];
      const fileName = `${propertyId}/${Date.now()}-${i}-${file.name}`;
      
      const { error } = await supabase.storage
        .from('property-images')
        .upload(fileName, file);
      
      if (error) {
        console.error('Error uploading file:', error);
        continue;
      }
      
      const { data } = supabase.storage
        .from('property-images')
        .getPublicUrl(fileName);
      
      imageUrls.push(data.publicUrl);
    }
    
    return imageUrls;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!user) {
      setAuthModalOpen(true);
      return;
    }

    setLoading(true);
    
    try {
      // Generate a temporary ID for image uploads
      const tempPropertyId = crypto.randomUUID();
      
      // Upload images first
      const imageUrls = await uploadImages(tempPropertyId);
      
      // Create property data object (not array)
      const propertyData = {
        user_id: user.id,
        title: formData.title,
        type: formData.type as 'residential' | 'commercial' | 'industrial',
        size: formData.size,
        unit: formData.unit as 'gaj' | 'sqmeter' | 'acre',
        state: formData.state,
        city: formData.city,
        area: formData.area,
        pincode: formData.pincode,
        address: formData.address,
        price: parseFloat(formData.price),
        price_text: `â‚¹${formData.price}`,
        negotiable: formData.negotiable === 'yes',
        description: formData.description,
        features: ['DTCP Approved', 'Clear Title', 'Ready for Construction'],
        images: imageUrls,
        status: 'pending' as const,
        serial_number: '' // This will be auto-generated by the database trigger
      };

      // Insert single object, not array
      const { data, error } = await supabase
        .from('properties')
        .insert(propertyData)
        .select()
        .single();

      if (error) throw error;

      toast({
        title: "Property Listed Successfully!",
        description: `Your property has been submitted for review. ID: ${data.serial_number}`,
      });

      // Reset form
      setFormData({
        title: '',
        type: '',
        size: '',
        unit: '',
        state: '',
        city: '',
        area: '',
        pincode: '',
        address: '',
        price: '',
        negotiable: '',
        description: '',
        features: []
      });
      setUploadedFiles([]);
    } catch (error: any) {
      toast({
        title: "Error",
        description: error.message,
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-background">
      <Header />
      
      <main className="pt-20">
        <div className="max-w-7xl mx-auto px-8 lg:px-12">
          {/* Hero Section */}
          <section className="bg-gradient-hero py-20 text-white rounded-2xl mb-12">
            <div className="text-center">
              <h1 className="text-5xl font-bold mb-6">List Your Property</h1>
              <p className="text-xl max-w-2xl mx-auto">
                Join thousands of property owners who trust 90acre.com to find the right buyers
              </p>
            </div>
          </section>

          {/* User Status */}
          {!user && (
            <div className="bg-blue-50 border border-blue-200 rounded-lg p-6 mb-8">
              <div className="flex items-center justify-between">
                <div>
                  <h3 className="text-lg font-semibold text-blue-900">Sign in Required</h3>
                  <p className="text-blue-700">You need to create an account to list your property.</p>
                </div>
                <Button onClick={() => setAuthModalOpen(true)} className="gap-2">
                  <LogIn className="h-4 w-4" />
                  Sign In
                </Button>
              </div>
            </div>
          )}

          {/* Listing Form */}
          <section className="pb-16">
            <Card className="shadow-hover">
              <CardHeader>
                <CardTitle className="text-3xl text-center">Property Listing Form</CardTitle>
              </CardHeader>
              <CardContent>
                <form onSubmit={handleSubmit} className="space-y-8">
                  {/* Basic Information */}
                  <div>
                    <h3 className="text-xl font-semibold mb-4 flex items-center gap-2">
                      <Home className="h-5 w-5" />
                      Basic Information
                    </h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <Input 
                        placeholder="Property Title" 
                        value={formData.title}
                        onChange={(e) => handleInputChange('title', e.target.value)}
                        required
                      />
                      <Select onValueChange={(value) => handleInputChange('type', value)}>
                        <SelectTrigger>
                          <SelectValue placeholder="Property Type" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="residential">Residential Plot</SelectItem>
                          <SelectItem value="commercial">Commercial Plot</SelectItem>
                          <SelectItem value="industrial">Industrial Plot</SelectItem>
                        </SelectContent>
                      </Select>
                      <Input 
                        placeholder="Plot Size" 
                        value={formData.size}
                        onChange={(e) => handleInputChange('size', e.target.value)}
                        required
                      />
                      <Select onValueChange={(value) => handleInputChange('unit', value)}>
                        <SelectTrigger>
                          <SelectValue placeholder="Unit" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="gaj">Gaj</SelectItem>
                          <SelectItem value="sqmeter">Sq. Meter</SelectItem>
                          <SelectItem value="acre">Acre</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                  </div>

                  {/* Location Details */}
                  <div>
                    <h3 className="text-xl font-semibold mb-4 flex items-center gap-2">
                      <MapPin className="h-5 w-5" />
                      Location Details
                    </h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <Select onValueChange={(value) => handleInputChange('state', value)}>
                        <SelectTrigger>
                          <SelectValue placeholder="Select State" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="delhi">Delhi</SelectItem>
                          <SelectItem value="haryana">Haryana</SelectItem>
                          <SelectItem value="uttar-pradesh">Uttar Pradesh</SelectItem>
                          <SelectItem value="rajasthan">Rajasthan</SelectItem>
                          <SelectItem value="punjab">Punjab</SelectItem>
                          <SelectItem value="maharashtra">Maharashtra</SelectItem>
                        </SelectContent>
                      </Select>
                      <Input 
                        placeholder="City" 
                        value={formData.city}
                        onChange={(e) => handleInputChange('city', e.target.value)}
                        required
                      />
                      <Input 
                        placeholder="Sector/Area" 
                        value={formData.area}
                        onChange={(e) => handleInputChange('area', e.target.value)}
                        required
                      />
                      <Input 
                        placeholder="Pin Code" 
                        value={formData.pincode}
                        onChange={(e) => handleInputChange('pincode', e.target.value)}
                        required
                      />
                    </div>
                    <div className="mt-4">
                      <Textarea 
                        placeholder="Complete Address" 
                        rows={3} 
                        value={formData.address}
                        onChange={(e) => handleInputChange('address', e.target.value)}
                        required
                      />
                    </div>
                  </div>

                  {/* Price Information */}
                  <div>
                    <h3 className="text-xl font-semibold mb-4 flex items-center gap-2">
                      <DollarSign className="h-5 w-5" />
                      Price Information
                    </h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <Input 
                        placeholder="Expected Price (â‚¹)" 
                        type="number"
                        value={formData.price}
                        onChange={(e) => handleInputChange('price', e.target.value)}
                        required
                      />
                      <Select onValueChange={(value) => handleInputChange('negotiable', value)}>
                        <SelectTrigger>
                          <SelectValue placeholder="Price Negotiable?" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="yes">Yes</SelectItem>
                          <SelectItem value="no">No</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                  </div>

                  {/* Property Description */}
                  <div>
                    <h3 className="text-xl font-semibold mb-4">Property Description</h3>
                    <Textarea 
                      placeholder="Describe your property, nearby facilities, and any special features..." 
                      rows={5} 
                      value={formData.description}
                      onChange={(e) => handleInputChange('description', e.target.value)}
                      required
                    />
                  </div>

                  {/* Images & Videos */}
                  <div>
                    <h3 className="text-xl font-semibold mb-4 flex items-center gap-2">
                      <Upload className="h-5 w-5" />
                      Images & Videos
                    </h3>
                    <div className="border-2 border-dashed border-border rounded-lg p-8 text-center">
                      <Upload className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
                      <p className="text-lg mb-2">Upload Property Images & Videos</p>
                      <p className="text-muted-foreground mb-4">Drag & drop files here or click to browse</p>
                      <input
                        type="file"
                        multiple
                        accept="image/*,video/*"
                        onChange={handleFileUpload}
                        className="hidden"
                        id="file-upload"
                      />
                      <label htmlFor="file-upload">
                        <Button type="button" variant="outline" className="cursor-pointer">
                          Choose Files
                        </Button>
                      </label>
                    </div>
                    
                    {/* Display uploaded files */}
                    {uploadedFiles.length > 0 && (
                      <div className="mt-4">
                        <h4 className="font-medium mb-2">Uploaded Files:</h4>
                        <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                          {uploadedFiles.map((file, index) => (
                            <div key={index} className="relative border rounded-lg p-2">
                              <div className="flex items-center justify-between">
                                <span className="text-sm truncate">{file.name}</span>
                                <Button
                                  type="button"
                                  variant="ghost"
                                  size="sm"
                                  onClick={() => removeFile(index)}
                                >
                                  <X className="h-4 w-4" />
                                </Button>
                              </div>
                            </div>
                          ))}
                        </div>
                      </div>
                    )}
                  </div>

                  {/* Submit Button */}
                  <div className="text-center pt-6">
                    <Button type="submit" variant="success" size="lg" className="px-12" disabled={loading || !user}>
                      {loading ? 'Listing Property...' : 'List My Property'}
                    </Button>
                    <p className="text-sm text-muted-foreground mt-4">
                      By submitting, you agree to our Terms & Conditions and Privacy Policy
                    </p>
                  </div>
                </form>
              </CardContent>
            </Card>
          </section>
        </div>
      </main>
      
      <Footer />
      
      <AuthModal 
        open={authModalOpen} 
        onOpenChange={setAuthModalOpen}
        onAuthSuccess={() => {
          toast({
            title: "Welcome!",
            description: "You can now list your property.",
          });
        }}
      />
    </div>
  );
};

export default ListProperty;
